#!/usr/bin/env python3

# -*- coding: utf-8 -*-

# -*- mode: python -*-
#
# elf_diff
#
# Copyright (C) 2019  Noseglasses (shinynoseglasses@gmail.com)
#
# This program is free software: you can redistribute it and/or modify it under it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with along with
# this program. If not, see <http://www.gnu.org/licenses/>.
#

import sys
import os
import inspect
import tempfile
from weasyprint import HTML

bin_path = os.path.dirname(os.path.realpath(inspect.getfile(inspect.currentframe())))

sys.path.append(bin_path + "/../python")

from elf_diff.settings import Settings
from elf_diff.mass_report import MassReport
from elf_diff.pair_report import PairReport


def writePairReport(settings):
    if settings.html_dir:
        multi_page_pair_report = PairReport(settings)
        multi_page_pair_report.single_page = False
        multi_page_pair_report.writeMultiPageHTMLReport()
        print("Multi page html pair report written to directory '" + settings.html_dir + "'")

    single_page_pair_report = None
    if settings.html_file:
        single_page_pair_report = PairReport(settings)
        single_page_pair_report.single_page = True

        single_page_pair_report.writeSinglePageHTMLReport()
        print("Single page html pair report '" + settings.html_file + "' written")

    if settings.pdf_file:

        if single_page_pair_report is None:
            single_page_pair_report = PairReport(settings)
            single_page_pair_report.single_page = True

        tmp_html_file = (
            tempfile._get_default_tempdir()
            + "/"
            + next(tempfile._get_candidate_names())
            + ".html"
        )

        single_page_pair_report.writeSinglePageHTMLReport(output_file=tmp_html_file)
        
        HTML(tmp_html_file).write_pdf(settings.pdf_file)

        os.remove(tmp_html_file)
        
        print("Single page pdf pair report '" + settings.pdf_file + "' written")
        
def writeMassReport(settings):

    mass_report = MassReport(settings)
    mass_report.single_page = True
    
    if settings.html_file:
        mass_report.generate(settings.html_file)
        print("Single page html mass report '" + settings.html_file + "' written")

    if settings.pdf_file:

        tmp_html_file = (
            tempfile._get_default_tempdir()
            + "/"
            + next(tempfile._get_candidate_names())
            + ".html"
        )

        mass_report.generate(tmp_html_file)
        
        print("Temp report: " + tmp_html_file)
        
        HTML(tmp_html_file).write_pdf(settings.pdf_file)

        os.remove(tmp_html_file)
        
        print("Single page pdf mass report '" + settings.pdf_file + "' written")

if __name__ == "__main__":

    print("bin_path = " + bin_path)
    settings = Settings(bin_path + "/..")

    report_generated = False

    if settings.mass_report or len(settings.mass_report_members) > 0:
        writeMassReport(settings)
        report_generated = True
    elif settings.isFirmwareBinaryDefined():
        writePairReport(settings)
        report_generated = True

    if settings.driver_template_file:
        settings.writeParameterTemplateFile(
            settings.driver_template_file, output_actual_values=report_generated
        )
